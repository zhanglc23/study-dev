package com.ivan.study.es;

import com.ivan.study.Msg;
import com.ivan.study.MsgType;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.action.search.SearchType;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.unit.TimeValue;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.xpack.client.PreBuiltXPackTransportClient;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.concurrent.ExecutionException;

/**
 * Description:
 * author zhanglc
 * Created on 2018/8/13.
 */

public class FOpenTest {
    private static Logger logger = LogManager.getLogger(Class.class);

    private static TransportClient client = null;

    private static final String INDEX_ACMT_PRIFIX = "index-acmadm-filebeat-" ;
    private static final String INDEX_FRONT_PRIFIX = "index-acmadmfront-filebeat-" ;
    private static final String INDEX_SUFFIX = "-doc" ;

    public static void main(String[] args) {
        String date = "2018.08.12" ;

        //获取连接
        getESSercherClient("172.16.76.14", 9300);

        //查询前置，如果是开销户就发送，记账下次发送，查询直接跳过
        BoolQueryBuilder type = QueryBuilders.boolQuery().mustNot(QueryBuilders.existsQuery("response")).must(QueryBuilders.matchPhraseQuery("type", "00101"));
//        QueryBuilder type = QueryBuilders.matchPhraseQuery("type", "00101");
        try {
            logger.info(">>>>>>>>>>>>>>>>>>>>>>>>>>>acmt front open woacc is start<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
            SearchResponse frsp = client.prepareSearch(INDEX_FRONT_PRIFIX + date + INDEX_SUFFIX).setQuery(type).setSearchType(SearchType.DFS_QUERY_THEN_FETCH)
                    .setScroll(new TimeValue(10000)).setSize(1000).execute().get();

            long totalHits = frsp.getHits().getTotalHits();
            int page = (int)totalHits / (5*1000) ;
            logger.info("front open woacc total = {} , totalpage = {}" , totalHits , page );
            for(int i = 0 ; i <= page ; i++) {
                SearchResponse fres = client.prepareSearchScroll(frsp.getScrollId()).setScroll(new TimeValue(10000)).execute().actionGet();
                SearchHits searchHits = fres.getHits();
                SearchHit[] hits = searchHits.getHits();
                logger.info("front open woacc page = {} , size = {}" , totalHits , i ,  hits.length);
                if (hits.length > 0) {
                    for (int j = 0; j < hits.length; j++) {
                        SearchHit hit = hits[j];
                        Msg reqMsg = getMsg(hit, MsgType.REQ , null );
                        String msgId = (String)hit.getSource().get("msgId");
//                        logger.info("front open woacc request page = {} , size = {} , NO = {} , msg = {}" ,  i ,  hits.length , j , message);
                        BoolQueryBuilder rm = QueryBuilders.boolQuery().must(QueryBuilders.existsQuery("response"))
                                .must(QueryBuilders.matchPhraseQuery("msgId", msgId));
                        SearchResponse frp = client.prepareSearch(INDEX_FRONT_PRIFIX + date + INDEX_SUFFIX).setQuery(rm).execute().actionGet();
                        SearchHits shits = frp.getHits();
                        SearchHit[] hits2 = shits.getHits();
                        if(hits2.length > 0) {
                            for (int m = 0 ; m < hits2.length ; m++) {
                                SearchHit h = hits2[m];
                                Msg rspmsg = getMsg(h, MsgType.RSP , reqMsg);
                                reqMsg.setAccDate(rspmsg.getAccDate());
                                logger.info("front open woacc request page = {} , size = {} , NO = {} , msg = {}" ,  i ,  hits2.length , j , reqMsg);
                                logger.info("front open woacc response page = {} , size = {} , NO = {} , msg = {}" ,  i ,  hits2.length , j , rspmsg);
                            }
                        }else {
                            logger.warn("front open woacc no response page = {} , size = {} , NO = {} " ,  i ,  hits.length , j );
                        }
                    }
                }
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            e.printStackTrace();
        }

    }

    private static Msg getMsg(SearchHit hit , MsgType msgType , Msg reqMsg) {
        String time = (String)hit.getSource().get("@timestamp");
        String source = (String)hit.getSource().get("log_source");
        String msgId = (String)hit.getSource().get("msgId");
        String message = (String)hit.getSource().get("message");
        String type ;
        String accDate = null;
        if(MsgType.REQ.equals(msgType)) {
            type = (String)hit.getSource().get("type");
        }else {
            type = reqMsg.getTxCode() ;
            accDate = message.substring(7 , 15);
        }
        return new Msg(time ,source , msgId , message ,msgType ,accDate  , type);
    }


    private static void getESSercherClient(String host, int port) {
        try {
            Settings settings = getSettings("Qindex2", "Q_index099_TT");
            client = new PreBuiltXPackTransportClient(settings)
                    .addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(host), port));
        } catch (UnknownHostException e) {
            throw new RuntimeException();
        }
    }

    private static Settings getSettings(String user, String pwd) {
        Settings settings = Settings.builder()
                .put("client.transport.sniff", true)
                .put("client.transport.ignore_cluster_name", true)
                .put("xpack.security.user", user + ":" + pwd).build();
        return settings;
    }
}
